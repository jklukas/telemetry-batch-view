sudo: required

services:
  - docker

# Try to keep things quick here since this section runs on every job whether it invokes sbt or not.
before_install:
  - export LOCAL_JAR='target/scala-2.11/telemetry-batch-view-1.1.jar'
  - export STAGED_JAR_URL="s3://$ARTIFACTS_BUCKET/tmp/$TRAVIS_REPO_SLUG/build-$TRAVIS_BUILD_NUMBER.jar"
  - shopt -s expand_aliases
  - env | grep TRAVIS > .travis-env
  - alias docker-run='docker run -v $PWD:/telemetry-batch-view $CI_ENV --env-file .travis-env telemetry-batch-view'


jobs:
  include:
    - stage: test
      script:
        - docker build --build-arg SCALA_VERSION=$(sed -n 's/.*scalaVersion[^0-9]*\([0-9.]*\).*/\1/p' build.sbt) --build-arg SBT_VERSION=$(sed -n 's/sbt.version=\([0-9.]*\)/\1/p' project/build.properties) -t telemetry-batch-view .
        - docker-run ./run-sbt.sh compile
    - stage: test
      script:
        - docker build --cache-from=927034868273.dkr.ecr.us-west-2.amazonaws.com/telemetry-batch-view:latest --build-arg SCALA_VERSION=$(sed -n 's/.*scalaVersion[^0-9]*\([0-9.]*\).*/\1/p' build.sbt) --build-arg SBT_VERSION=$(sed -n 's/sbt.version=\([0-9.]*\)/\1/p' project/build.properties) -t telemetry-batch-view .
        - docker-run ./run-sbt.sh compile
    #     # The deploy stage jobs only run once all jobs from the previous phase succeed.
    # - stage: deploy
    #   env:
    #     - PURPOSE='run a GitHub release'
    #   script: skip
    #   deploy:
    #   - provider: releases
    #     skip_cleanup: true
    #     api_key:
    #       secure: Kac5/sXg9TM8cBHrwNch78UiVTl4aA2KQ9jnv0vipUzi341XfmO3EbdEnSCWN+ew39Pc+tAR+nOB+e/AHbOyFjJ5gggA3Z/3UWPYse/8iIPcRs8GC55KfprDrVkD8HO3pPzOXOyDtn64Y6z3cQXGj110QKfPjG6v+LHzNDSl1oxZB7f8bnoNEom5WxZCMAvZO3odbrnKPP333gPpjtmXfe24WlPqBMg3FN+RJMy1lz+bjlDB0hd1qbVdUO3DYivodcn/q1Sdp98EipwCWnOq3JqrmfDhf9rRL1UnSC+WsbcxJL73ee36EkNORSTYVFzhfoSRmNlhqNgGI8DdDhO654fKecXPiWDHyZw+cF/DQHsvmSk5zr5VobeqyByM9cqFj+5gs3RN3CI2UaUbceRwuerwpuFCAVt2WHSw2heYeOlmoLNX2+HFYPCXFJOkzQ5pZl5fEsc280riU/9wlvNfLhKTIJNyP3n3OlU/YlU0FYfR2jF637KAhLX9z8LxY1aEcdcAI7sWCz5jyMGRwvCS7prRneg1ouPn+bUSab7+GMi8F3Rdf1qWZx8IivpXiOw3MubsLLBeXep+PbE70n6AFB68ThgKEAhJsJpqtZKbqpz3w+w6iOe9Ig85P+WdXTK7zC4itWzZfEihk8TTGzerlSHgpMR9lBgvkzJkFY3MQqI=
    #     on:
    #       repo: mozilla/telemetry-batch-view
    #       condition: $TRAVIS_COMMIT_MESSAGE == *"[auto-deploy]"*
    #       branch: master
    # - stage: deploy
    #   if: repo = mozilla/telemetry-batch-view
    #   env:
    #     - PURPOSE='deploy the staged uberjar to S3'
    #   script:
    #     - pip install --user awscli
    #     - mkdir -p $(dirname $LOCAL_JAR)
    #     - aws s3 cp $STAGED_JAR_URL $LOCAL_JAR
    #     - JAR=$LOCAL_JAR bash deploy.sh
    #     - aws s3 rm $STAGED_JAR_URL

# Caching optimizations for faster builds taken from:
# http://timperrett.com/2016/10/02/continuous-delivery-for-scala-with-travisci/
# cache:
#   directories:
#     - $HOME/.ivy2/cache
#     - $HOME/.sbt/boot
# after_success:
#   - find $HOME/.sbt -name "*.lock" | xargs rm
#   - find $HOME/.ivy2 -name "ivydata-*.properties" | xargs rm
